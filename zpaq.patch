diff -Naur upstream-zpaq/Makefile my-zpaq/Makefile
--- upstream-zpaq/Makefile	2020-01-22 11:55:50.708279159 -0500
+++ my-zpaq/Makefile	2020-01-22 11:56:24.728328994 -0500
@@ -1,7 +1,7 @@
 CXX=g++
 CPPFLAGS+=-Dunix
 # CPPFLAGS+=NOJIT
-CXXFLAGS=-O3 -march=native
+CXXFLAGS=-O3 -march=native -mtune=native -pipe
 PREFIX=/usr/local
 BINDIR=$(PREFIX)/bin
 MANDIR=$(PREFIX)/share/man
@@ -12,10 +12,10 @@
 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ -c libzpaq.cpp
 
 zpaq.o: zpaq.cpp libzpaq.h
-	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ -c zpaq.cpp -pthread
+	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ -c zpaq.cpp -pthread -fopenmp
 
 zpaq: zpaq.o libzpaq.o
-	$(CXX) $(LDFLAGS) -o $@ zpaq.o libzpaq.o -pthread
+	$(CXX) $(LDFLAGS) -o $@ zpaq.o libzpaq.o -pthread -fopenmp
 
 zpaq.1: zpaq.pod
 	pod2man $< >$@
diff -Naur upstream-zpaq/readme.txt my-zpaq/readme.txt
--- upstream-zpaq/readme.txt	2020-01-22 11:55:50.708279159 -0500
+++ my-zpaq/readme.txt	2020-01-22 11:56:24.728328994 -0500
@@ -1,4 +1,3 @@
-zpaq715.zip, Aug. 17, 2016.
 
 zpaq is a journaling archiver optimized for user-level incremental
 backup of directory trees in Windows and *nix. It supports AES-256
diff -Naur upstream-zpaq/zpaq.cpp my-zpaq/zpaq.cpp
--- upstream-zpaq/zpaq.cpp	2020-01-22 11:55:50.709279190 -0500
+++ my-zpaq/zpaq.cpp	2020-01-22 11:57:53.915006069 -0500
@@ -1,6 +1,6 @@
 // zpaq.cpp - Journaling incremental deduplicating archiver
 
-#define ZPAQ_VERSION "7.15"
+#define ZPAQ_VERSION "7.15-tony-revision"
 /*
   This software is provided as-is, with no warranty.
   I, Matt Mahoney, release this software into
@@ -95,6 +95,19 @@
 #include <sys/sysctl.h>
 #endif
 
+#ifdef unixtest
+struct termios {
+  int c_lflag;
+};
+#define ECHO 1
+#define ECHONL 2
+#define TCSANOW 4
+int tcgetattr(int, termios*) {return 0;}
+int tcsetattr(int, int, termios*) {return 0;}
+#else
+#include <termios.h>
+#endif
+
 #else  // Assume Windows
 #include <windows.h>
 #include <io.h>
@@ -940,6 +953,91 @@
   return r+(uint64_t(btoi(s))<<32);
 }
 
+
+/////////////////////////// read_password ////////////////////////////
+
+// Read a password from argv[i+1..argc-1] or from the console without
+// echo (repeats times) if this sequence is empty. repeats can be 1 or 2.
+// If 2, require the same password to be entered twice in a row.
+// Advance i by the number of words in the password on the command
+// line, which will be 0 if the user is prompted.
+// Write the SHA-256 hash of the password in hash[0..31].
+// Return the length of the original password.
+
+int read_password(char* hash, int repeats,
+                 int argc, const char** argv, int& i) {
+  assert(repeats==1 || repeats==2);
+  libzpaq::SHA256 sha256;
+  int result=0;
+
+  // Read password from argv[i+1..argc-1]
+  if (i<argc-1 && argv[i+1][0]!='-') {
+    while (true) {  // read multi-word password with spaces between args
+      ++i;
+      for (const char* p=argv[i]; p && *p; ++p) sha256.put(*p);
+      if (i<argc-1 && argv[i+1][0]!='-') sha256.put(' ');
+      else break;
+    }
+    result=sha256.usize();
+    memcpy(hash, sha256.result(), 32);
+    return result;
+  }
+
+  // Otherwise prompt user
+  char oldhash[32]={0};
+  if (repeats==2)
+    fprintf(stderr, "Enter new password twice:\n");
+  else {
+    fprintf(stderr, "Password: ");
+    fflush(stderr);
+  }
+  do {
+
+  // Read password without echo to end of line
+#if unix
+    struct termios term, oldterm;
+    FILE* in=fopen("/dev/tty", "r");
+    if (!in) in=stdin;
+    tcgetattr(fileno(in), &oldterm);
+    memcpy(&term, &oldterm, sizeof(term));
+    term.c_lflag&=~ECHO;
+    term.c_lflag|=ECHONL;
+    tcsetattr(fileno(in), TCSANOW, &term);
+    char buf[256];
+    if (!fgets(buf, 250, in)) return 0;
+    tcsetattr(fileno(in), TCSANOW, &oldterm);
+    if (in!=stdin) fclose(in);
+    for (unsigned i=0; i<250 && buf[i]!=10 && buf[i]!=13 && buf[i]!=0; ++i)
+      sha256.put(buf[i]);
+#else
+    HANDLE h=GetStdHandle(STD_INPUT_HANDLE);
+    DWORD mode=0, n=0;
+    wchar_t buf[256];
+    if (h!=INVALID_HANDLE_VALUE
+        && GetConsoleMode(h, &mode)
+        && SetConsoleMode(h, mode&~ENABLE_ECHO_INPUT)
+        && ReadConsole(h, buf, 250, &n, NULL)) {
+      SetConsoleMode(h, mode);
+      fprintf(stderr, "\n");
+      for (unsigned i=0; i<n && i<250 && buf[i]!=10 && buf[i]!=13; ++i)
+        sha256.put(buf[i]);
+    }
+    else {
+      fflush(stdout);
+      fprintf(stderr, "Windows error %d\n", int(GetLastError()));
+      error("Read password failed");
+    }
+#endif
+    result=sha256.usize();
+    memcpy(oldhash, hash, 32);
+    memcpy(hash, sha256.result(), 32);
+    memset(buf, 0, sizeof(buf));  // clear sensitive data
+  }
+  while (repeats==2 && memcmp(oldhash, hash, 32));
+  return result;
+}
+
+
 /////////////////////////////// Jidac /////////////////////////////////
 
 // A Jidac object represents an archive contents: a list of file
@@ -1030,7 +1128,7 @@
   const char* index;        // index option
   char password_string[32]; // hash of -key argument
   const char* password;     // points to password_string or NULL
-  string method;            // default "1"
+  string method;            // default "3"
   bool noattributes;        // -noattributes option
   vector<string> notfiles;  // list of prefixes to exclude
   string nottype;           // -not =...
@@ -1089,8 +1187,8 @@
 "                  List: compare file contents instead of dates.\n"
 "  -index F        Extract: create index F for archive.\n"
 "                  Add: create suffix for archive indexed by F, update F.\n"
-"  -key X          Create or access encrypted archive with password X.\n"
-"  -mN  -method N  Compress level N (0..5 = faster..better, default 1).\n"
+"  -key X          Create/access encrypted archive with password X (or prompt if none given).\n"
+"  -mN  -method N  Compress level N (0..5 = faster..better, default 3).\n"
 "  -noattributes   Ignore/don't save file attributes or permissions.\n"
 "  -not files...   Exclude. * and ? match any string or char.\n"
 "       =[+-#^?]   List: exclude by comparison result.\n"
@@ -1219,11 +1317,10 @@
     else if (opt=="-force" || opt=="-f") force=true;
     else if (opt=="-fragment" && i<argc-1) fragment=atoi(argv[++i]);
     else if (opt=="-index" && i<argc-1) index=argv[++i];
-    else if (opt=="-key" && i<argc-1) {
-      libzpaq::SHA256 sha256;
-      for (const char* p=argv[++i]; *p; ++p) sha256.put(*p);
-      memcpy(password_string, sha256.result(), 32);
-      password=password_string;
+    else if (opt=="-key") {
+      if (read_password(password_string, 2-exists(archive),
+          argc, argv, i))
+        password=password_string;
     }
     else if (opt=="-method" && i<argc-1) method=argv[++i];
     else if (opt[1]=='m') method=argv[i]+2;
@@ -2180,7 +2277,7 @@
   printf(" at offset %1.0f + %1.0f\n", double(header_pos), double(offset));
 
   // Set method
-  if (method=="") method="1";
+  if (method=="") method="3";
   if (method.size()==1) {  // set default blocksize
     if (method[0]>='2' && method[0]<='9') method+="6";
     else method+="4";
